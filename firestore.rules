rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Common functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isUserOwned(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidTransaction() {
      return request.resource.data.keys().hasAll(['date', 'amountSent', 'goldRate', 'taxAmount', 'goldPurchased', 'userId', 'createdAt']) &&
             request.resource.data.amountSent is number &&
             request.resource.data.goldRate is number &&
             request.resource.data.taxAmount is number &&
             request.resource.data.goldPurchased is number &&
             request.resource.data.userId is string &&
             request.resource.data.date is timestamp &&
             request.resource.data.createdAt is timestamp &&
             request.resource.data.amountSent >= 0 &&
             request.resource.data.goldRate > 0 &&
             request.resource.data.taxAmount >= 0 &&
             request.resource.data.goldPurchased >= 0;
    }
    
    function isValidSettings() {
      return request.resource.data.keys().hasAll(['value', 'updatedAt']) &&
             request.resource.data.value is number &&
             request.resource.data.updatedAt is timestamp &&
             request.resource.data.value > 0;
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAny(['email', 'displayName', 'createdAt', 'lastLoginAt']) &&
             (request.resource.data.email == null || request.resource.data.email is string) &&
             (request.resource.data.displayName == null || request.resource.data.displayName is string);
    }
    
    // User documents - users can only access their own document
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isUserOwned(userId) && isValidUserData();
      allow read: if isAuthenticated() && isUserOwned(userId);
      
      // User settings subcollection
      match /settings/{settingId} {
        allow read: if isAuthenticated() && isUserOwned(userId);
        allow write: if isAuthenticated() && isUserOwned(userId) && isValidSettings();
      }
      
      // User investments subcollection - Gold transactions
      match /investments/gold/transactions/{transactionId} {
        allow read: if isAuthenticated() && isUserOwned(userId);
        allow create: if isAuthenticated() && isUserOwned(userId) && 
                      isValidTransaction() && 
                      request.resource.data.userId == userId;
        allow update: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId && 
                      isValidTransaction() && 
                      request.resource.data.userId == userId;
        allow delete: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId;
      }
      
      // User investments subcollection - Silver transactions
      match /investments/silver/transactions/{transactionId} {
        allow read: if isAuthenticated() && isUserOwned(userId);
        allow create: if isAuthenticated() && isUserOwned(userId) && 
                      request.resource.data.userId == userId;
        allow update: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId && 
                      request.resource.data.userId == userId;
        allow delete: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId;
      }
      
      // User investments subcollection - Stocks transactions
      match /investments/stocks/transactions/{transactionId} {
        allow read: if isAuthenticated() && isUserOwned(userId);
        allow create: if isAuthenticated() && isUserOwned(userId) && 
                      request.resource.data.userId == userId;
        allow update: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId && 
                      request.resource.data.userId == userId;
        allow delete: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId;
      }
      
      // User investments subcollection - Mutual Funds transactions
      match /investments/mutualfunds/transactions/{transactionId} {
        allow read: if isAuthenticated() && isUserOwned(userId);
        allow create: if isAuthenticated() && isUserOwned(userId) && 
                      request.resource.data.userId == userId;
        allow update: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId && 
                      request.resource.data.userId == userId;
        allow delete: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId;
      }
      
      // User investments subcollection - Fixed Deposits transactions
      match /investments/fd/transactions/{transactionId} {
        allow read: if isAuthenticated() && isUserOwned(userId);
        allow create: if isAuthenticated() && isUserOwned(userId) && 
                      request.resource.data.userId == userId;
        allow update: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId && 
                      request.resource.data.userId == userId;
        allow delete: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId;
      }
      
      // User investments subcollection - Recurring Deposits transactions
      match /investments/rd/transactions/{transactionId} {
        allow read: if isAuthenticated() && isUserOwned(userId);
        allow create: if isAuthenticated() && isUserOwned(userId) && 
                      request.resource.data.userId == userId;
        allow update: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId && 
                      request.resource.data.userId == userId;
        allow delete: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId;
      }
      
      // Catch-all for any other investment types
      match /investments/{investmentType}/transactions/{transactionId} {
        allow read: if isAuthenticated() && isUserOwned(userId);
        allow create: if isAuthenticated() && isUserOwned(userId) && 
                      request.resource.data.userId == userId;
        allow update: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId && 
                      request.resource.data.userId == userId;
        allow delete: if isAuthenticated() && isUserOwned(userId) && 
                      resource.data.userId == userId;
      }
    }
    
    // Legacy transactions collection (for backward compatibility during migration)
    // Only allow reading and deleting after migration
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                    resource.data.userId == request.auth.uid;
    }
    
    // Legacy settings collection (for backward compatibility during migration)
    // Only allow reading after migration
    match /settings/{document=**} {
      allow read: if isAuthenticated();
    }
    
    // Deny access to all other documents by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}